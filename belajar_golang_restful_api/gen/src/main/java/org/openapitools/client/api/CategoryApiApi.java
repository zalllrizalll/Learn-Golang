/*
 * Category RESTful API
 * API Spec for Category RESTful API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateorUpdateCategory;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoryApiApi {
    private ApiClient localVarApiClient;

    public CategoryApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoryApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for categoriesCategoryIdDelete
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success delete category </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesCategoryIdDeleteCall( UNKNOWN_PARAMETER_NAME, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(UNKNOWN_PARAMETER_NAME.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesCategoryIdDeleteValidateBeforeCall( UNKNOWN_PARAMETER_NAME, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'UNKNOWN_PARAMETER_NAME' is set
        if (UNKNOWN_PARAMETER_NAME == null) {
            throw new ApiException("Missing the required parameter 'UNKNOWN_PARAMETER_NAME' when calling categoriesCategoryIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesCategoryIdDeleteCall(UNKNOWN_PARAMETER_NAME, _callback);
        return localVarCall;

    }

    /**
     * Delete Category by Id
     * Delete Category by Id
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success delete category </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 categoriesCategoryIdDelete( UNKNOWN_PARAMETER_NAME) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = categoriesCategoryIdDeleteWithHttpInfo(UNKNOWN_PARAMETER_NAME);
        return localVarResp.getData();
    }

    /**
     * Delete Category by Id
     * Delete Category by Id
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success delete category </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> categoriesCategoryIdDeleteWithHttpInfo( UNKNOWN_PARAMETER_NAME) throws ApiException {
        okhttp3.Call localVarCall = categoriesCategoryIdDeleteValidateBeforeCall(UNKNOWN_PARAMETER_NAME, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Category by Id (asynchronously)
     * Delete Category by Id
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success delete category </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesCategoryIdDeleteAsync( UNKNOWN_PARAMETER_NAME, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesCategoryIdDeleteValidateBeforeCall(UNKNOWN_PARAMETER_NAME, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesCategoryIdGet
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success get category </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesCategoryIdGetCall( UNKNOWN_PARAMETER_NAME, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(UNKNOWN_PARAMETER_NAME.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesCategoryIdGetValidateBeforeCall( UNKNOWN_PARAMETER_NAME, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'UNKNOWN_PARAMETER_NAME' is set
        if (UNKNOWN_PARAMETER_NAME == null) {
            throw new ApiException("Missing the required parameter 'UNKNOWN_PARAMETER_NAME' when calling categoriesCategoryIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesCategoryIdGetCall(UNKNOWN_PARAMETER_NAME, _callback);
        return localVarCall;

    }

    /**
     * Get Category by Id
     * Get Category by Id
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success get category </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 categoriesCategoryIdGet( UNKNOWN_PARAMETER_NAME) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = categoriesCategoryIdGetWithHttpInfo(UNKNOWN_PARAMETER_NAME);
        return localVarResp.getData();
    }

    /**
     * Get Category by Id
     * Get Category by Id
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success get category </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> categoriesCategoryIdGetWithHttpInfo( UNKNOWN_PARAMETER_NAME) throws ApiException {
        okhttp3.Call localVarCall = categoriesCategoryIdGetValidateBeforeCall(UNKNOWN_PARAMETER_NAME, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Category by Id (asynchronously)
     * Get Category by Id
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success get category </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesCategoryIdGetAsync( UNKNOWN_PARAMETER_NAME, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesCategoryIdGetValidateBeforeCall(UNKNOWN_PARAMETER_NAME, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesCategoryIdPut
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @param createorUpdateCategory  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success get category </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesCategoryIdPutCall( UNKNOWN_PARAMETER_NAME, CreateorUpdateCategory createorUpdateCategory, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createorUpdateCategory;

        // create path and map variables
        String localVarPath = "/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(UNKNOWN_PARAMETER_NAME.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesCategoryIdPutValidateBeforeCall( UNKNOWN_PARAMETER_NAME, CreateorUpdateCategory createorUpdateCategory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'UNKNOWN_PARAMETER_NAME' is set
        if (UNKNOWN_PARAMETER_NAME == null) {
            throw new ApiException("Missing the required parameter 'UNKNOWN_PARAMETER_NAME' when calling categoriesCategoryIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesCategoryIdPutCall(UNKNOWN_PARAMETER_NAME, createorUpdateCategory, _callback);
        return localVarCall;

    }

    /**
     * Update category by Id
     * Update category by Id
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @param createorUpdateCategory  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success get category </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 categoriesCategoryIdPut( UNKNOWN_PARAMETER_NAME, CreateorUpdateCategory createorUpdateCategory) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = categoriesCategoryIdPutWithHttpInfo(UNKNOWN_PARAMETER_NAME, createorUpdateCategory);
        return localVarResp.getData();
    }

    /**
     * Update category by Id
     * Update category by Id
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @param createorUpdateCategory  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success get category </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> categoriesCategoryIdPutWithHttpInfo( UNKNOWN_PARAMETER_NAME, CreateorUpdateCategory createorUpdateCategory) throws ApiException {
        okhttp3.Call localVarCall = categoriesCategoryIdPutValidateBeforeCall(UNKNOWN_PARAMETER_NAME, createorUpdateCategory, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update category by Id (asynchronously)
     * Update category by Id
     * @param UNKNOWN_PARAMETER_NAME Category Id (required)
     * @param createorUpdateCategory  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success get category </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesCategoryIdPutAsync( UNKNOWN_PARAMETER_NAME, CreateorUpdateCategory createorUpdateCategory, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesCategoryIdPutValidateBeforeCall(UNKNOWN_PARAMETER_NAME, createorUpdateCategory, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success Get All Categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = categoriesGetCall(_callback);
        return localVarCall;

    }

    /**
     * List All Categories
     * List All of Categories
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success Get All Categories </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 categoriesGet() throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = categoriesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List All Categories
     * List All of Categories
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success Get All Categories </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> categoriesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All Categories (asynchronously)
     * List All of Categories
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success Get All Categories </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetAsync(final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesPost
     * @param createorUpdateCategory  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success Create Category </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesPostCall(CreateorUpdateCategory createorUpdateCategory, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createorUpdateCategory;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesPostValidateBeforeCall(CreateorUpdateCategory createorUpdateCategory, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = categoriesPostCall(createorUpdateCategory, _callback);
        return localVarCall;

    }

    /**
     * Create new a Category
     * Create new a Category
     * @param createorUpdateCategory  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success Create Category </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 categoriesPost(CreateorUpdateCategory createorUpdateCategory) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = categoriesPostWithHttpInfo(createorUpdateCategory);
        return localVarResp.getData();
    }

    /**
     * Create new a Category
     * Create new a Category
     * @param createorUpdateCategory  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success Create Category </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> categoriesPostWithHttpInfo(CreateorUpdateCategory createorUpdateCategory) throws ApiException {
        okhttp3.Call localVarCall = categoriesPostValidateBeforeCall(createorUpdateCategory, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new a Category (asynchronously)
     * Create new a Category
     * @param createorUpdateCategory  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success Create Category </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesPostAsync(CreateorUpdateCategory createorUpdateCategory, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesPostValidateBeforeCall(createorUpdateCategory, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
